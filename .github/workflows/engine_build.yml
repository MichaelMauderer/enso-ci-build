name: Build Engine

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches:
      - develop

      # A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare:
    runs-on: [self-hosted]
    outputs:
      ENSO_VERSION: ${{ steps.prepare-step.outputs.ENSO_VERSION }}
      ENSO_RELEASE_ID: ${{ steps.prepare-step.outputs.ENSO_RELEASE_ID }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: enso-org/enso
          path: enso
          ref: wip/mwu/engine-version-from-env
      - uses: actions/checkout@v2
        with:
          path: ci-build
          clean: false
      - name: Run a multi-line script
        id: prepare-step
        run: cargo run --bin enso-build -- ../enso prepare --kind nightly
        working-directory: ${{ github.workspace }}/ci-build
        env:
          GITHUB_TOKEN: ${{ github.token }}

  finish:
    runs-on: [self-hosted]
    needs: [prepare, build]
    env:
      ENSO_VERSION: ${{needs.prepare.outputs.ENSO_VERSION}}
      ENSO_RELEASE_ID: ${{needs.prepare.outputs.ENSO_RELEASE_ID}}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: enso-org/enso
          path: enso
          ref: wip/mwu/engine-version-from-env
      - uses: actions/checkout@v2
        with:
          path: ci-build
          clean: false
      - name: Run a multi-line script
        id: prepare-step
        run: cargo run --bin enso-build -- ../enso finish --kind nightly
        working-directory: ${{ github.workspace }}/ci-build
        env:
          GITHUB_TOKEN: ${{ github.token }}

      # This workflow contains a single job called "build"
  build:
    needs: prepare
    env:
      ENSO_VERSION: ${{needs.prepare.outputs.ENSO_VERSION}}
      ENSO_RELEASE_ID: ${{needs.prepare.outputs.ENSO_RELEASE_ID}}
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macos-latest
        - [self-hosted, Windows]
        - [self-hosted, Linux]
        - [self-hosted, macOS]]
        nightly: [true, false]
      fail-fast: false

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          repository: enso-org/enso
          path: enso
          ref: wip/mwu/engine-version-from-env
      - uses: actions/checkout@v2
        with:
          path: ci-build
          clean: false

      - name: Setup conda
        uses: s-weigand/setup-conda@v1.0.5
        if: contains(matrix.os, 'self-hosted') == false
        with:
          update-conda: false
          conda-channels: anaconda, conda-forge

      - name: Configure Pagefile (Windows)
        if: contains(matrix.os, 'self-hosted') == false  &&  runner.os == 'Windows'
        uses: al-cheb/configure-pagefile-action@v1.2
        with:
          minimum-size: 16GB
          maximum-size: 16GB
          disk-root: "C:"
      ###################################################################################

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: cargo run --bin enso-build -- ../enso upload --kind nightly
        working-directory: ${{ github.workspace }}/ci-build
        env:
          GITHUB_TOKEN: ${{ github.token }}
        if: >
          matrix.nightly
            && (contains(matrix.os, 'self-hosted') && (runner.os == 'Windows' || runner.os == 'Linux') 
                || (!contains(matrix.os, 'self-hosted') && runner.os == 'macOS'))
      - name: Run a multi-line script
        run: cargo run --bin enso-build -- ../enso build --kind nightly
        working-directory: ${{ github.workspace }}/ci-build
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Same condition as above but wrapped with !()
        if: >
          matrix.nightly 
              && !(contains(matrix.os, 'self-hosted') && (runner.os == 'Windows' || runner.os == 'Linux') 
                || (!contains(matrix.os, 'self-hosted') && runner.os == 'macOS'))
      - name: Run a multi-line script
        run: cargo run --bin enso-build -- ../enso build
        working-directory: ${{ github.workspace }}/ci-build
        env:
          GITHUB_TOKEN: ${{ github.token }}
        if: "!matrix.nightly"


      ###################################################################################
      - name: Publish the Engine Distribution Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ENGINE_DIST_NAME }}
          # Irregular, engine is pre-zipped to avoid long paths issues of nodejs.
          path: ${{ env.ENGINE_DIST_ARCHIVE }}
      - name: Publish the Launcher
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.LAUNCHER_DIST_NAME }}
          path: ${{ env.LAUNCHER_DIST_ROOT }}
      - name: Publish the Project Manager
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECTMANAGER_DIST_NAME }}
          path: ${{ env.PROJECTMANAGER_DIST_ROOT }}
      - name: Publish the FlatBuffers Schemas
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: Engine Protocol FlatBuffers Schemas
          path: ${{ env.TARGET_DIR }}/fbs-upload/fbs-schema.zip
      - name: Publish the Parser JS Bundle
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v2
        with:
          name: Parser JS Bundle
          path: ${{ env.TARGET_DIR }}/scala-parser.js
